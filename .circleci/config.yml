# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
version: 2.1

orbs: 
  telegram: uniqueck/telegram-orb@0.0.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
jobs:
  integration:
    docker:
      - image: node:16
    steps:
      - telegram/status
      - checkout
      - restore_cache:
          name: "Restore yarn cache if exists"
          keys:
            - yarn-packages-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: "install"
          command: yarn install
      - save_cache:
          name: "Save yarn cache"
          paths:
            - node_modules
          key: yarn-packages-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: "linting"
          command: yarn run lint
      - run:
          name: "build"
          command: yarn run build
      - run:
          name: "test"
          command: yarn run test
      - telegram/status
  deployment:
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          name: "Restore yarn cache if exists"
          keys:
            - yarn-packages-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Login to docker hub
          command: docker login -u $DOCKER_HUB_LOGIN -p $DOCKER_HUB_PASS
      - run:
          name: Push staging image
          command: make pushStaging
      - run:
          name: Send start staging
          command: ssh -o StrictHostKeyChecking=accept-new ubuntu@staging.cicd.etelcode.fr "cd code/poc_ci_cd ; make startStaging"
      - run:
          name: Download & Run newman tests
          command: make getTests
      - save_cache:
          name: "Save yarn cache"
          paths:
            - node_modules
          key: yarn-packages-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Test staging with newman
          command: docker run -t postman/newman run "https://www.getpostman.com/collections/42326d59eec020c80c77"
      - run:
          name: Push release image
          command: make pushRelease
      - run:
          name: Send start production
          command: ssh -o StrictHostKeyChecking=accept-new ubuntu@staging.cicd.etelcode.fr "cd code/poc_ci_cd ; make startProd"
      - telegram/status


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  push: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - integration
      - deployment:
          requires:
          - integration
